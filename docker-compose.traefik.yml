services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.email=seu-email@exemplo.com
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    networks:
      - nexus-flow-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`seu-dominio.com`)
      - traefik.http.routers.frontend.entrypoints=websecure
      - traefik.http.routers.frontend.tls.certresolver=myresolver
      - traefik.http.services.frontend.loadbalancer.server.port=80
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://seu-dominio.com/api
      - VITE_CLERK_PUBLISHABLE_KEY=${VITE_CLERK_PUBLISHABLE_KEY}
      - VITE_APP_ENV=production
    depends_on:
      - api
    networks:
      - nexus-flow-network
    restart: unless-stopped

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: production
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`seu-dominio.com`) && PathPrefix(`/api`)
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.routers.api.tls.certresolver=myresolver
      - traefik.http.services.api.loadbalancer.server.port=3001
      - traefik.http.middlewares.api-stripprefix.stripprefix.prefixes=/api
      - traefik.http.routers.api.middlewares=api-stripprefix
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      - DATABASE_URL=${DATABASE_URL}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - CORS_ORIGINS=https://seu-dominio.com
      - LOG_LEVEL=info
      - ENABLE_SWAGGER=false
      - RATE_LIMIT=100
    depends_on:
      db:
        condition: service_healthy
    networks:
      - nexus-flow-network
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    container_name: nexus_flow_db_prod
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-nexus_flow}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      - interval: 10s
      - timeout: 5s
      - retries: 5
      - start_period: 30s
    networks:
      - nexus-flow-network
    restart: unless-stopped

volumes:
  postgres_data_prod:
  letsencrypt:

networks:
  nexus-flow-network:
    driver: bridge 