services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    ports:
      - '80:80'
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${VITE_API_URL:-http://localhost:3001}
      - VITE_CLERK_PUBLISHABLE_KEY=${VITE_CLERK_PUBLISHABLE_KEY}
      - VITE_APP_ENV=production
    depends_on:
      - api
    networks:
      - nexus-flow-network
    restart: unless-stopped

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: production
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@db:5432/nexus_flow}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost}
      - LOG_LEVEL=info
      - ENABLE_SWAGGER=false
      - RATE_LIMIT=100
    depends_on:
      db:
        condition: service_healthy
    networks:
      - nexus-flow-network
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    container_name: nexus_flow_db_prod
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-nexus_flow}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - nexus-flow-network
    restart: unless-stopped

volumes:
  postgres_data_prod:

networks:
  nexus-flow-network:
    driver: bridge 